<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_MAJOR</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>ae3eebd8e944254875015072f4cb7f37f</Anchor>
    <Abstract>The current major version. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_MINOR</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>ab48339917d1b2a14e87e49a8057b726a</Anchor>
    <Abstract>The current minor version. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_PATCH</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>adb67443327ce82101d0b9b9bc14f4ff7</Anchor>
    <Abstract>The current patch level. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_REVISION</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>a1ab1cd6de5387ddfac49de020e6ae99a</Anchor>
    <Abstract>The current SCM revision. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_ABI</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>aab0ced3f934c8c127ad7678102776039</Anchor>
    <Abstract>The current binary interface. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_STRING</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>aacb503102ddb1dc7d573dba714a6d3df</Anchor>
    <Abstract>The current major.minor.version as a string. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_REV_STRING</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>acfb07f9cce00185cf5449718b0694ddd</Anchor>
    <Abstract>The current major.minor.version.revision as a string. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_GT</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>a3720e0b675fd284e3b5e2db92e2f09b7</Anchor>
    <Abstract>True if the current version is newer than the given one. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_GE</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>ac404aa464d71212fec82a2a45bb17874</Anchor>
    <Abstract>True if the current version is equal or newer to the given. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_LT</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>abb47eb16fded53b6e41230f600a43195</Anchor>
    <Abstract>True if the current version is older than the given one. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DEFLECT_VERSION_LE</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>version_8h.html</Path>
    <Anchor>ab0356195acd429a35370786528eb22df</Anchor>
    <Abstract>True if the current version is older or equal to the given. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Changelog</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>Changelog.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md__jenkins_04_workspace_oss.Deflect.documentation_build_type_Debug_platform_cscsviz-vm_sources_doc_ChromaSubsampling</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md__jenkins_04_workspace_oss.Deflect.documentation_build_type_Debug_platform_cscsviz-vm_sources_doc_ChromaSubsampling.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md__jenkins_04_workspace_oss.Deflect.documentation_build_type_Debug_platform_cscsviz-vm_sources_doc_StereoStreaming</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>md__jenkins_04_workspace_oss.Deflect.documentation_build_type_Debug_platform_cscsviz-vm_sources_doc_StereoStreaming.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>apps</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>apps.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>simplestreamer</Name>
      <APILanguage>markdown</APILanguage>
    </TokenIdentifier>
    <Path>simplestreamer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::Event</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Abstract>A user event within a window. </Abstract>
    <DeclaredIn>Event.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a53cf20f805ffc8b02eefc09630f2830c</Anchor>
    <Abstract>The type of event. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mouseX</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a42c48f6ac9f5ce439938465304f83823</Anchor>
    <Abstract>Normalized X mouse/touch position relative to the window. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mouseY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a4e99317297b97c36acad4e095f49d1fe</Anchor>
    <Abstract>Normalized Y mouse/touch position relative to the window. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dx</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a16b046b14e8d6f66685cc3db5f669f7d</Anchor>
    <Abstract>Normalized horizontal delta for pan/pinch events / delta in pixels for wheel events. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a2a2dcc09ecccae9283d91290b2e33ced</Anchor>
    <Abstract>Normalized vertical delta for pan/pinch events / delta in pixels for wheel events. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mouseLeft</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a68f0b1c510d0dac47e73764312e39578</Anchor>
    <Abstract>State of left mouse button (pressed=true) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mouseRight</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a1348a405ee165fa57767eee687e4a1b7</Anchor>
    <Abstract>State of right mouse button (pressed=true) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mouseMiddle</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>ae20855655437dc0c2927ff3c122d20f5</Anchor>
    <Abstract>State of middle mouse button (pressed=true) </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>ad0a05174d31daebea94896a083d65ee8</Anchor>
    <Abstract>The key code, see QKeyEvent::key() / number of fingers for gestures / point id for touch events...</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modifiers</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>af9f96947fd3600458b99223389f5d293</Anchor>
    <Abstract>The keyboard modifiers, see QKeyEvent::modifiers() </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>text</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>ade0b96971d9b67e03c492b745bba2685</Anchor>
    <Abstract>Carries unicode for key, see QKeyEvent::text() </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>serializedSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Event</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_event.html</Path>
    <Anchor>a5938de50a58544e35146cd7746e9ddd9</Anchor>
    <Abstract>The size of the QDataStream serialized output. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::ImageWrapper</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Abstract>A simple wrapper around an image data buffer. </Abstract>
    <DeclaredIn>ImageWrapper.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ImageWrapper</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a8a4e5989c0f7f44bcf579752d3dcf6ac</Anchor>
    <Abstract>ImageWrapper constructor. </Abstract>
    <DeclaredIn>ImageWrapper.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBytesPerPixel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a6e1357a7aa3628ddc8f272a6bc340df9</Anchor>
    <Abstract>Get the number of bytes per pixel based on the pixelFormat. </Abstract>
    <DeclaredIn>ImageWrapper.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBufferSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a1bbcaaa81b91344e9864a90c5b09fc6c</Anchor>
    <Abstract>Get the size of the data buffer in bytes: width*height*format.bpp. </Abstract>
    <DeclaredIn>ImageWrapper.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>data</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a36c9098b98a8086e903ed777ebee9a35</Anchor>
    <Abstract>Pointer to the image data of size getBufferSize(). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pixelFormat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>ad2d409293b0c361bf47a76b9ac5f4330</Anchor>
    <Abstract>The pixel format describing the arrangement of the data buffer. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a9429316b8075a05b80634aafa9caaa6b</Anchor>
    <Abstract>The view that this image represents. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rowOrder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a35ba63533c9e07a77f76fe0eecb24114</Anchor>
    <Abstract>The order of the image&amp;#39;s data rows in memory. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a628b197165c3e428e4b895e3fbd18146</Anchor>
    <Abstract>The image width in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>ae94eda15c61b09f3874a23b2a93fe0f9</Anchor>
    <Abstract>The image height in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>x</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a9390a77359e5104598c1d5a8afc51df5</Anchor>
    <Abstract>The X coordinate. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>y</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>aaaa2941b2a63cedd5592391bbcba6912</Anchor>
    <Abstract>The Y coordinate. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compressionPolicy</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a117951a971e2db4500d2a01ba6ac1e58</Anchor>
    <Abstract>Is the image to be compressed (default: auto). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>compressionQuality</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>aea79767865a32c31889e30a4c8bd5e41</Anchor>
    <Abstract>Compression quality (1 worst, 100 best, default: 75). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>subsampling</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::ImageWrapper</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_image_wrapper.html</Path>
    <Anchor>a311f8928041b91a31d5e19f548f5699e</Anchor>
    <Abstract>Chrominance sub-sampling. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::Observer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Abstract>Connect to a deflect Server and register for events. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a467325a3802dd4bb54506c992ba85e00</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a181df093ca665f1f44e141f0a33c2805</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ab0b86cfd3538565452ad5a5deedd0788</Anchor>
    <Abstract>Open a new connection to the Server. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>acd94277799d2fd25ed9d8a3e4cac43be</Anchor>
    <Abstract>Destruct the Observer, closing the connection. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConnected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aa04d3d3dc5d0e6a9aeba7aad57b3991e</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getId</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a9309f73f6b7cf643f1fd17bcac5853b1</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a8df240aff19f98333bcb5f8fbceb3a55</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a94607a3f8ef2fd06af2d4d72160db9ac</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerForEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a1d3f203c171c9f65ed28d301a52a7d23</Anchor>
    <Abstract>Register to receive Events. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRegisteredForEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ab69c0ff6b31c9b9de39ec8805ed65b85</Anchor>
    <Abstract>Is this observer registered to receive events. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDescriptor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ae5eba663b97167ec0cbfdd0f655aa27c</Anchor>
    <Abstract>Get the native descriptor for the data stream. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a0313ae0b3fda6cde8c32727abd1e6fda</Anchor>
    <Abstract>Check if a new Event is available. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ad5844800488ff92d3165bf6beb09b30f</Anchor>
    <Abstract>Get the next Event. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setDisconnectedCallback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aea4eaa9ac04f38bf8fc31826d073e182</Anchor>
    <Abstract>Set a function to be be called just after the observer gets disconnected. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendSizeHints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a863ee68e5e842c40d2c090dfc112c07e</Anchor>
    <Abstract>Send size hints to the stream server to indicate sizes that should be respected by resize operations ...</Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aa02cb3ad9b6b99e36760d84f87ea6fb1</Anchor>
    <Abstract>Send data to the Server. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>defaultPortNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a2df3c337681f5df5724685ed35fc982d</Anchor>
    <Abstract>The default communication port. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::SizeHints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::SizeHints</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_size_hints.html</Path>
    <Abstract>A struct that contains hints about minimum, maximum and preferred sizes of a streamer which can be in...</Abstract>
    <DeclaredIn>SizeHints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UNSPECIFIED_SIZE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::SizeHints</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1_size_hints.html</Path>
    <Anchor>ab5669f53ce44753dda1934a2b1208e48</Anchor>
    <Abstract>value for an unspecified size value; streamer did not report any hint </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::Stream</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Abstract>Stream visual data to a deflect Server. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>a5bef22dd831e886429004e86af59c3ad</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>ac722a15dbf4e8b0e66fe87558c00184a</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Stream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>aef7e07b3a53624602801b131ed1526a9</Anchor>
    <Abstract>Open a new connection to the Server. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Stream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>a3aef9921d1bc59ffea7b2de8cdf2b7e3</Anchor>
    <Abstract>Destruct the Stream, closing the connection. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a467325a3802dd4bb54506c992ba85e00</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a181df093ca665f1f44e141f0a33c2805</Anchor>
    <Abstract>Open a new connection to the Server using environment variables. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ab0b86cfd3538565452ad5a5deedd0788</Anchor>
    <Abstract>Open a new connection to the Server. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Observer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>acd94277799d2fd25ed9d8a3e4cac43be</Anchor>
    <Abstract>Destruct the Observer, closing the connection. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isConnected</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aa04d3d3dc5d0e6a9aeba7aad57b3991e</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getId</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a9309f73f6b7cf643f1fd17bcac5853b1</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getHost</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a8df240aff19f98333bcb5f8fbceb3a55</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a94607a3f8ef2fd06af2d4d72160db9ac</Anchor>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerForEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a1d3f203c171c9f65ed28d301a52a7d23</Anchor>
    <Abstract>Register to receive Events. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRegisteredForEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ab69c0ff6b31c9b9de39ec8805ed65b85</Anchor>
    <Abstract>Is this observer registered to receive events. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getDescriptor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ae5eba663b97167ec0cbfdd0f655aa27c</Anchor>
    <Abstract>Get the native descriptor for the data stream. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hasEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a0313ae0b3fda6cde8c32727abd1e6fda</Anchor>
    <Abstract>Check if a new Event is available. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>ad5844800488ff92d3165bf6beb09b30f</Anchor>
    <Abstract>Get the next Event. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setDisconnectedCallback</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aea4eaa9ac04f38bf8fc31826d073e182</Anchor>
    <Abstract>Set a function to be be called just after the observer gets disconnected. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendSizeHints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a863ee68e5e842c40d2c090dfc112c07e</Anchor>
    <Abstract>Send size hints to the stream server to indicate sizes that should be respected by resize operations ...</Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>aa02cb3ad9b6b99e36760d84f87ea6fb1</Anchor>
    <Abstract>Send data to the Server. </Abstract>
    <DeclaredIn>Observer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Future</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>a0e5fa6cbc93599957783a66b2ff86569</Anchor>
    <Abstract>Future signaling success of asyncSend(). </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>send</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>a4eec165c648025bd37802e2eec0fd6d3</Anchor>
    <Abstract>Send an image asynchronously. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>finishFrame</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>aa39cdae31fbe6346c10f9dc1fd0bf215</Anchor>
    <Abstract>Asynchronously notify that all the images for this frame have been sent. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendAndFinish</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::Stream</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_stream.html</Path>
    <Anchor>aa5c6fb788f4272115a3dd10fa4e6640b</Anchor>
    <Abstract>Send an image and finish the frame asynchronously. </Abstract>
    <DeclaredIn>Stream.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>defaultPortNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::Observer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_observer.html</Path>
    <Anchor>a2df3c337681f5df5724685ed35fc982d</Anchor>
    <Abstract>The default communication port. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::Version</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Abstract>Information about the current Deflect version. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMajor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>ae5d71acc7fad06dbcb673e37c905e263</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMinor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>aa634ce089d675e03f59580e703d2aaa6</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPatch</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>ab2bd448e81b1014087e824efacd8fe91</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>ac87161d36ea0dd6d8cc648f3cd6408d6</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRevision</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>a9fbb2e46c61e429be717a886ef57703c</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getABI</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>af9af044c68918db0efb0ebc620198e14</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRevString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>ad5609c825783681386c5cbb295c632d4</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>check</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>a324cd0b47c982f26f290c4a3939bfb68</Anchor>
    <Abstract>Runtime check for ABI compatibility. </Abstract>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSchema</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>a4efebd40c76185b573c00d6f50089d3a</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toJSON</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::Version</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1_version.html</Path>
    <Anchor>aae94467b4fd09abce9c73c8f2af45add</Anchor>
    <DeclaredIn>version.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::qt::OffscreenQuickView</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Abstract>An offscreen Qt Quick window, similar to a QQuickView. </Abstract>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>afterRender</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>afb4caab279f05bac7c8764d6ad1f6c84</Anchor>
    <Abstract>Notify that the scene has just finished rendering. </Abstract>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OffscreenQuickView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>a67872b984530032c74a15b89aff1d1f3</Anchor>
    <Abstract>Create an offscreen qml view. </Abstract>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~OffscreenQuickView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>a4a10f2f72e7c5297263506d9857ad187</Anchor>
    <Abstract>Close the view, stopping the rendering. </Abstract>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>load</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>aadf6197028f8fe19e07ab6891faa256e</Anchor>
    <Abstract>Load a qml file to render. </Abstract>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRootItem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>af9116ef03dfd4aad28ddb5f644271174</Anchor>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getEngine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>a06259d460bd4d808cdb116b006b049f9</Anchor>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRootContext</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::OffscreenQuickView</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_offscreen_quick_view.html</Path>
    <Anchor>ac42b3f30cd0f5a0488e5930d467cc103</Anchor>
    <DeclaredIn>OffscreenQuickView.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::qt::QmlStreamer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Abstract>Based on http://doc.qt.io/qt-5/qtquick-rendercontrol-example.html. </Abstract>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>streamClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>a4a13cac43c74f70aed903e14912904d8</Anchor>
    <Abstract>Emitted when the stream has been closed. </Abstract>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QmlStreamer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>aa9534a0231065a41b1f7b29703bcfaef</Anchor>
    <Abstract>Construct a new qml streamer by loading the QML, accessible by getRootItem() and sets up the Deflect ...</Abstract>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>useAsyncSend</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>a132d3663e59957e11a333de25e255e7c</Anchor>
    <Abstract>Use asynchronous send of images via Deflect stream. </Abstract>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRootItem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>a38af8a75a8d33fcad833649ba0844c01</Anchor>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getQmlEngine</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>a2093b0e732c47a75a9b6951f63adb597</Anchor>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sendData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QmlStreamer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_qml_streamer.html</Path>
    <Anchor>a813f38f626cb1785b02784d44f962303</Anchor>
    <Abstract>Send data to the Server. </Abstract>
    <DeclaredIn>QmlStreamer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::qt::QuickRenderer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Abstract>Renders the QML scene from the given window using QQuickRenderControl onto the surface of the window ...</Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>afterRender</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>aafa2f70c2b00da50f72d32a956159d95</Anchor>
    <Abstract>Emitted at the end of render(). </Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stopping</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>a6996c7254349f96abe6aae2cdb9ba92c</Anchor>
    <Abstract>Emitted from the render thread during stop(). </Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>QuickRenderer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>aaeba9c5135aaafce3cc683fb0dab36df</Anchor>
    <Abstract>After construction, move the object to a dedicated render thread before calling any other function...</Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~QuickRenderer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>ace26a9fe5169a7873eb66e82440dc50c</Anchor>
    <Abstract>Destructor. </Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>context</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>aa2e49cfd27f82ad0d147a74eafd8a3e1</Anchor>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>fbo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>a789e01b5a2a931ff2d4b7d2ff5886714</Anchor>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>a05177ebef07ea33260998d0f3a212ae9</Anchor>
    <Abstract>To be called from GUI/main thread to initialize this object on render thread. </Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>render</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>a6d8dbb634c27a5bdb4abae63189861b5</Anchor>
    <Abstract>To be called from GUI/main thread to trigger rendering. </Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>stop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::QuickRenderer</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_quick_renderer.html</Path>
    <Anchor>a4c8499406f5d684811dde1bb268bceac</Anchor>
    <Abstract>To be called from GUI/main thread to stop using this object on the render thread. ...</Abstract>
    <DeclaredIn>QuickRenderer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::qt::TouchInjector</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Abstract>Inject complete QTouchEvent from separate touch added/updated/removed events. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapToSceneFunc</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a1dda68b03b458ad8008c79541194040d</Anchor>
    <Abstract>Function to map normalized coordinates to scene / window coordinates. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TouchInjector</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a5347f1348ab37ddc04e15ca953eef83c</Anchor>
    <Abstract>Constructor. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addTouchPoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a0594e115df0d4cb5c8d306f4da4d42e0</Anchor>
    <Abstract>Insert a new touch point. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>updateTouchPoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>ae53469ba2912e4847687619deab2f10d</Anchor>
    <Abstract>Update an existing touch point. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeTouchPoint</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a1b15ba90f5754acf4e577ed827ff4be0</Anchor>
    <Abstract>Remove an existing touch point. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeAllTouchPoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a96c53f72080981e4c3165b1d58dcbdf8</Anchor>
    <Abstract>Remove all touch points. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>create</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>deflect::qt::TouchInjector</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1qt_1_1_touch_injector.html</Path>
    <Anchor>a7f24d1f0f9697bdcdae2663b0a9e6b59</Anchor>
    <Abstract>Create a touch injector for a QWindow. </Abstract>
    <DeclaredIn>TouchInjector.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::server::EventReceiver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::server::EventReceiver</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_event_receiver.html</Path>
    <Abstract>Interface for classes to register as receivers for events. </Abstract>
    <DeclaredIn>EventReceiver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::server::Frame</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::server::Frame</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_frame.html</Path>
    <Abstract>A frame for a PixelStream. </Abstract>
    <DeclaredIn>Frame.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>computeDimensions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>deflect::server::Frame</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_frame.html</Path>
    <Anchor>abf7b2d6684c8ce7d36c60917370f3885</Anchor>
    <DeclaredIn>Frame.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>determineRowOrder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>deflect::server::Frame</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_frame.html</Path>
    <Anchor>a0690eef2c131e98fb914c72d46ceaaa6</Anchor>
    <DeclaredIn>Frame.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>tiles</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Frame</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_frame.html</Path>
    <Anchor>abde481a183109d15eb80a9a1ec6cc53f</Anchor>
    <Abstract>The full set of tiles for this frame. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>uri</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Frame</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_frame.html</Path>
    <Anchor>add1b1c4ad66f986585ec1045025a90df</Anchor>
    <Abstract>The PixelStream uri to which this frame is associated. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::server::Server</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Abstract>Listen to incoming connections from multiple Stream clients. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>requestFrame</Name>
      <APILanguage>cpp</APILanguage>
      <Type>slot</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a53578b1b66268132fea4c9f27fc8fd4a</Anchor>
    <Abstract>Request the dispatching of the next frame for a given pixel stream. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>closePixelStream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>slot</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a1427952a7599f2d2cd70480dae2e510d</Anchor>
    <Abstract>Close a pixel stream, disconnecting the remote client. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pixelStreamOpened</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a7cbcc005981372219fa5f8eac5c3d319</Anchor>
    <Abstract>Notify that a pixel stream has been opened. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pixelStreamException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a52e82079a828034fde4573850fd22da4</Anchor>
    <Abstract>Notify that a stream has encountered an exception and will be closed. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pixelStreamClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a58ee245d0221ab8100af61b688f9ee2a</Anchor>
    <Abstract>Notify that a pixel stream has been closed. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receivedFrame</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>af09da2646b2d99d6b8869366f68b5e75</Anchor>
    <Abstract>Emitted when a full frame has been received from a pixel stream. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerToEvents</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>ad24b52a3110180f4a9690e4479010e0f</Anchor>
    <Abstract>Emitted when a remote client wants to register for receiving events. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receivedSizeHints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a0c66f4608871f57e1e2c3875d667b866</Anchor>
    <Abstract>Emitted when a remote client sends size hints for displaying the stream. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>receivedData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>signal</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a8b907e0f6b1314608f65f576d9b87bc7</Anchor>
    <Abstract>Emitted when a remote client sends generic data. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Server</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a99dde5f3b1d47a03c088352aaaab1077</Anchor>
    <Abstract>Create a new server listening for Stream connections. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Server</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>af9816b462464b653024426cba643ed9c</Anchor>
    <Abstract>Stop the server and close all open pixel stream connections. </Abstract>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a96fc3e4f85d0070a8e7b28bc01ef5dfe</Anchor>
    <DeclaredIn>Server.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>defaultPortNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Server</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_server.html</Path>
    <Anchor>a5d8e7e8d5174d98d897c9b997ae8d8b2</Anchor>
    <Abstract>The default port number used for Stream connections. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::server::Tile</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Abstract>A Tile is a sub-region of an image in a Frame. </Abstract>
    <DeclaredIn>Tile.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>imageData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>aa7429f1c7e4e92d0022e4b601746e4df</Anchor>
    <Abstract>Image data. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>x</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>ac352b76c661315b24c8fb45d6d063ec0</Anchor>
    <Abstract>The x position in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>y</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>ab73173abacd6edd7b2cdf43d2e4a64cd</Anchor>
    <Abstract>The y position in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>width</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>abc26d47ed8c59f791780491d35fb5145</Anchor>
    <Abstract>The width in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>height</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>a20dd7ce92e4296ce09d1fd0edbd85b7e</Anchor>
    <Abstract>The height in pixels. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>format</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>ab3239bf344e6ce57d0c36c9cf60884f3</Anchor>
    <Abstract>Format in which the data is stored. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rowOrder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>a0a30da6b60fa13a7c5800e486fcebb10</Anchor>
    <Abstract>Row order of imageData. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>view</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>deflect::server::Tile</Scope>
    </TokenIdentifier>
    <Path>structdeflect_1_1server_1_1_tile.html</Path>
    <Anchor>aaaff8a0f99eb57ff9d65a4ecb1ec2c5c</Anchor>
    <Abstract>Eye pass for the Tile. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>deflect::server::TileDecoder</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Abstract>Decode a Tile&amp;#39;s image asynchronously. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TileDecoder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>a19c36ff558a7b2e4e32d4c6ec383f0ea</Anchor>
    <Abstract>Construct a Decoder. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~TileDecoder</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>a72ca9dc0c4296f994a746870b9ed2804</Anchor>
    <Abstract>Destruct a Decoder. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decodeType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>aaedd59898e8ae2e71350085ff3573610</Anchor>
    <Abstract>Decode the data type of a JPEG tile. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>a74feaecebb4b7eeb77adf585aca59b39</Anchor>
    <Abstract>Decode a JPEG tile to RGB. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>decodeToYUV</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>a209bdf954c2e66995f46e1c624662fa7</Anchor>
    <Abstract>Decode a JPEG tile to YUV, skipping the YUV -&gt; RGB step. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>startDecoding</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>ac16484be63f1f816338e7a7996730724</Anchor>
    <Abstract>Start decoding a tile. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>waitDecoding</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>aa139647c377c9e2e7f784351c10084c4</Anchor>
    <Abstract>Waits for the decoding of a tile to finish, initiated by startDecoding(). </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isRunning</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>deflect::server::TileDecoder</Scope>
    </TokenIdentifier>
    <Path>classdeflect_1_1server_1_1_tile_decoder.html</Path>
    <Anchor>aa85711e7900fc52940f7ed4423b18ad0</Anchor>
    <Abstract>Check if the decoding thread is running. </Abstract>
    <DeclaredIn>TileDecoder.h</DeclaredIn>
  </Token>
</Tokens>
