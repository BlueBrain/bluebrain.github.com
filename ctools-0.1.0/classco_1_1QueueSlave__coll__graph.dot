digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{co::QueueSlave\n||+ QueueSlave()\l+ ~QueueSlave()\l+ pop()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node2 [label="{co::Object\n||+ Object()\l+ ~Object()\l+ isAttached()\l+ getLocalNode()\l+ setID()\l+ getID()\l+ getInstanceID()\l+ isBuffered()\l+ isMaster()\l+ getChangeType()\l+ getMaxVersions()\l+ chooseCompressor()\l+ isDirty()\l+ push()\l+ commit()\l+ setAutoObsolete()\l+ getAutoObsolete()\l+ sync()\l+ getHeadVersion()\l+ getVersion()\l+ notifyNewHeadVersion()\l+ notifyNewVersion()\l+ getInstanceData()\l+ applyInstanceData()\l+ pack()\l+ unpack()\l+ send()\l+ send()\l+ send()\l+ send()\l+ notifyAttach()\l+ notifyAttached()\l+ notifyDetach()\l+ notifyDetached()\l+ getMasterInstanceID()\l+ getMasterNode()\l+ addSlave()\l+ removeSlave()\l+ removeSlaves()\l+ setMasterNode()\l+ addInstanceDatas()\l+ setupChangeManager()\l+ attach()\l+ detach()\l+ transfer()\l+ applyMapData()\l+ sendInstanceData()\l# Object()\l# operator=()\l* isAttached()\l* getLocalNode()\l* setID()\l* getID()\l* getInstanceID()\l* isBuffered()\l* isMaster()\l* getChangeType()\l* getMaxVersions()\l* chooseCompressor()\l* isDirty()\l* push()\l* commit()\l* setAutoObsolete()\l* getAutoObsolete()\l* sync()\l* getHeadVersion()\l* getVersion()\l* notifyNewHeadVersion()\l* notifyNewVersion()\l* getInstanceData()\l* applyInstanceData()\l* pack()\l* unpack()\l* send()\l* send()\l* send()\l* send()\l* notifyAttach()\l* notifyAttached()\l* notifyDetach()\l* notifyDetached()\l* getMasterInstanceID()\l* getMasterNode()\l* addSlave()\l* removeSlave()\l* removeSlaves()\l* setMasterNode()\l* addInstanceDatas()\l* setupChangeManager()\l* attach()\l* detach()\l* transfer()\l* applyMapData()\l* sendInstanceData()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classco_1_1Object.html",tooltip="A generic, distributed object."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node3 [label="{co::Dispatcher\n||+ Dispatcher()\l+ Dispatcher()\l+ ~Dispatcher()\l+ operator=()\l+ dispatchCommand()\l# registerCommand()\l# _cmdUnknown()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classco_1_1Dispatcher.html",tooltip="A helper class providing command packet dispatch functionality to networked objects."];
}
